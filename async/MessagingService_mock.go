// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package async

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMessagingService creates a new instance of MockMessagingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessagingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessagingService {
	mock := &MockMessagingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessagingService is an autogenerated mock type for the MessagingService type
type MockMessagingService struct {
	mock.Mock
}

type MockMessagingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessagingService) EXPECT() *MockMessagingService_Expecter {
	return &MockMessagingService_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockMessagingService
func (_mock *MockMessagingService) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessagingService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockMessagingService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockMessagingService_Expecter) Close() *MockMessagingService_Close_Call {
	return &MockMessagingService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockMessagingService_Close_Call) Run(run func()) *MockMessagingService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessagingService_Close_Call) Return(err error) *MockMessagingService_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessagingService_Close_Call) RunAndReturn(run func() error) *MockMessagingService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockMessagingService
func (_mock *MockMessagingService) Publish(ctx context.Context, topic string, data []byte) error {
	ret := _mock.Called(ctx, topic, data)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = returnFunc(ctx, topic, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessagingService_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockMessagingService_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - data []byte
func (_e *MockMessagingService_Expecter) Publish(ctx interface{}, topic interface{}, data interface{}) *MockMessagingService_Publish_Call {
	return &MockMessagingService_Publish_Call{Call: _e.mock.On("Publish", ctx, topic, data)}
}

func (_c *MockMessagingService_Publish_Call) Run(run func(ctx context.Context, topic string, data []byte)) *MockMessagingService_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMessagingService_Publish_Call) Return(err error) *MockMessagingService_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessagingService_Publish_Call) RunAndReturn(run func(ctx context.Context, topic string, data []byte) error) *MockMessagingService_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// QueueSubscribe provides a mock function for the type MockMessagingService
func (_mock *MockMessagingService) QueueSubscribe(ctx context.Context, topic string, queue string, callback MessageHandler) error {
	ret := _mock.Called(ctx, topic, queue, callback)

	if len(ret) == 0 {
		panic("no return value specified for QueueSubscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, MessageHandler) error); ok {
		r0 = returnFunc(ctx, topic, queue, callback)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessagingService_QueueSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueSubscribe'
type MockMessagingService_QueueSubscribe_Call struct {
	*mock.Call
}

// QueueSubscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - queue string
//   - callback MessageHandler
func (_e *MockMessagingService_Expecter) QueueSubscribe(ctx interface{}, topic interface{}, queue interface{}, callback interface{}) *MockMessagingService_QueueSubscribe_Call {
	return &MockMessagingService_QueueSubscribe_Call{Call: _e.mock.On("QueueSubscribe", ctx, topic, queue, callback)}
}

func (_c *MockMessagingService_QueueSubscribe_Call) Run(run func(ctx context.Context, topic string, queue string, callback MessageHandler)) *MockMessagingService_QueueSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 MessageHandler
		if args[3] != nil {
			arg3 = args[3].(MessageHandler)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMessagingService_QueueSubscribe_Call) Return(err error) *MockMessagingService_QueueSubscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessagingService_QueueSubscribe_Call) RunAndReturn(run func(ctx context.Context, topic string, queue string, callback MessageHandler) error) *MockMessagingService_QueueSubscribe_Call {
	_c.Call.Return(run)
	return _c
}
