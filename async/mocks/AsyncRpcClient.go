// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// AsyncRpcClient is an autogenerated mock type for the AsyncRpcClient type
type AsyncRpcClient struct {
	mock.Mock
}

// Call provides a mock function with given fields: ctx, topic, data, timeout
func (_m *AsyncRpcClient) Call(ctx context.Context, topic string, data []byte, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(ctx, topic, data, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) ([]byte, error)); ok {
		return rf(ctx, topic, data, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) []byte); ok {
		r0 = rf(ctx, topic, data, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, time.Duration) error); ok {
		r1 = rf(ctx, topic, data, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *AsyncRpcClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Request provides a mock function with given fields: ctx, topic, data, timeout
func (_m *AsyncRpcClient) Request(ctx context.Context, topic string, data []byte, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(ctx, topic, data, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) ([]byte, error)); ok {
		return rf(ctx, topic, data, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) []byte); ok {
		r0 = rf(ctx, topic, data, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, time.Duration) error); ok {
		r1 = rf(ctx, topic, data, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAsyncRpcClient creates a new instance of AsyncRpcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncRpcClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncRpcClient {
	mock := &AsyncRpcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
