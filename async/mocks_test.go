// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package async

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAsyncRpcClient creates a new instance of MockAsyncRpcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAsyncRpcClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAsyncRpcClient {
	mock := &MockAsyncRpcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAsyncRpcClient is an autogenerated mock type for the AsyncRpcClient type
type MockAsyncRpcClient struct {
	mock.Mock
}

type MockAsyncRpcClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAsyncRpcClient) EXPECT() *MockAsyncRpcClient_Expecter {
	return &MockAsyncRpcClient_Expecter{mock: &_m.Mock}
}

// Call provides a mock function for the type MockAsyncRpcClient
func (_mock *MockAsyncRpcClient) Call(ctx context.Context, topic string, data []byte, timeout time.Duration) ([]byte, error) {
	ret := _mock.Called(ctx, topic, data, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) ([]byte, error)); ok {
		return returnFunc(ctx, topic, data, timeout)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) []byte); ok {
		r0 = returnFunc(ctx, topic, data, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte, time.Duration) error); ok {
		r1 = returnFunc(ctx, topic, data, timeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAsyncRpcClient_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockAsyncRpcClient_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - data []byte
//   - timeout time.Duration
func (_e *MockAsyncRpcClient_Expecter) Call(ctx interface{}, topic interface{}, data interface{}, timeout interface{}) *MockAsyncRpcClient_Call_Call {
	return &MockAsyncRpcClient_Call_Call{Call: _e.mock.On("Call", ctx, topic, data, timeout)}
}

func (_c *MockAsyncRpcClient_Call_Call) Run(run func(ctx context.Context, topic string, data []byte, timeout time.Duration)) *MockAsyncRpcClient_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAsyncRpcClient_Call_Call) Return(bytes []byte, err error) *MockAsyncRpcClient_Call_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockAsyncRpcClient_Call_Call) RunAndReturn(run func(ctx context.Context, topic string, data []byte, timeout time.Duration) ([]byte, error)) *MockAsyncRpcClient_Call_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockAsyncRpcClient
func (_mock *MockAsyncRpcClient) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAsyncRpcClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockAsyncRpcClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockAsyncRpcClient_Expecter) Close() *MockAsyncRpcClient_Close_Call {
	return &MockAsyncRpcClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockAsyncRpcClient_Close_Call) Run(run func()) *MockAsyncRpcClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAsyncRpcClient_Close_Call) Return(err error) *MockAsyncRpcClient_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAsyncRpcClient_Close_Call) RunAndReturn(run func() error) *MockAsyncRpcClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function for the type MockAsyncRpcClient
func (_mock *MockAsyncRpcClient) Request(ctx context.Context, topic string, data []byte, timeout time.Duration) ([]byte, error) {
	ret := _mock.Called(ctx, topic, data, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) ([]byte, error)); ok {
		return returnFunc(ctx, topic, data, timeout)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) []byte); ok {
		r0 = returnFunc(ctx, topic, data, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte, time.Duration) error); ok {
		r1 = returnFunc(ctx, topic, data, timeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAsyncRpcClient_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockAsyncRpcClient_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - data []byte
//   - timeout time.Duration
func (_e *MockAsyncRpcClient_Expecter) Request(ctx interface{}, topic interface{}, data interface{}, timeout interface{}) *MockAsyncRpcClient_Request_Call {
	return &MockAsyncRpcClient_Request_Call{Call: _e.mock.On("Request", ctx, topic, data, timeout)}
}

func (_c *MockAsyncRpcClient_Request_Call) Run(run func(ctx context.Context, topic string, data []byte, timeout time.Duration)) *MockAsyncRpcClient_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAsyncRpcClient_Request_Call) Return(bytes []byte, err error) *MockAsyncRpcClient_Request_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockAsyncRpcClient_Request_Call) RunAndReturn(run func(ctx context.Context, topic string, data []byte, timeout time.Duration) ([]byte, error)) *MockAsyncRpcClient_Request_Call {
	_c.Call.Return(run)
	return _c
}
